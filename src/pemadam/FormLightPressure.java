/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package pemadam;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableModel;

/**
 *
 * @author raz
 */
public class FormLightPressure extends javax.swing.JFrame {
    DefaultTableModel model;
    
    // variable untuk menampung nilai baris yang diselect
    int row;

    /**
     * Creates new form FormPeralatan
     */
    public FormLightPressure() {
        initComponents();
        
        // Biar Ketengah
        setLocationRelativeTo(null);
        
        // mengambil model table
        model = (DefaultTableModel) table.getModel();
        
        // Panggil Fungsi LoadTable
        loadTable();
    }
    
    private void loadTable() {
        try {
            // mengambil koneksi dari database
            Connection c = Koneksi.getKoneksi();
            
            // mengambil hasil dari eksekusi query, dengan menggabungkan table groupa, groupb, dan groupc
            ResultSet rs = c.createStatement().executeQuery(
                "SELECT * FROM (SELECT * FROM groupa UNION ALL SELECT * FROM groupb UNION ALL SELECT * FROM groupc) AS a WHERE jenis = 'LIGHT PRESSURE'"
            );
            
            // menghapus data yang ada di table output
            model.getDataVector().clear();
            
            while (rs.next()) {
                // menambah 1 bari data ke table output
                model.addRow(new Object[] {
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6),
                    rs.getString(7),
                    rs.getString(8)
                });
            }
            
            // memberitahu table, untuk merubah tampilannya
            model.fireTableDataChanged();
        } catch (SQLException ex) {
            // menampilkan dialog jika ada error
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        kondisi = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jLabel1 = new javax.swing.JLabel();
        txtNrk = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtNama = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        txtKeterangan = new javax.swing.JTextField();
        btnSimpan = new javax.swing.JButton();
        btnHapus = new javax.swing.JButton();
        btnEdit = new javax.swing.JButton();
        txtCari = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        table = new javax.swing.JTable();
        comboGroup = new javax.swing.JComboBox<>();
        jLabel7 = new javax.swing.JLabel();
        txtIdPeralatan = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        txtNamaPeralatan = new javax.swing.JTextField();
        jLabel9 = new javax.swing.JLabel();
        kondisiBaik = new javax.swing.JRadioButton();
        kondisiRusak = new javax.swing.JRadioButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(0, 0, 153));

        jPanel2.setBackground(new java.awt.Color(204, 0, 0));

        jLabel6.setFont(new java.awt.Font("Noto Sans", 1, 18)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 0));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("PENDATAAN PERALATAN UNIT LIGHT PRESSURE");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel6, javax.swing.GroupLayout.DEFAULT_SIZE, 42, Short.MAX_VALUE)
                .addContainerGap())
        );

        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setText("NRK");

        txtNrk.setBackground(new java.awt.Color(255, 255, 255));
        txtNrk.setForeground(new java.awt.Color(0, 0, 0));
        txtNrk.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtNrkActionPerformed(evt);
            }
        });

        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("Nama");

        txtNama.setBackground(new java.awt.Color(255, 255, 255));
        txtNama.setForeground(new java.awt.Color(0, 0, 0));

        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("Group");

        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("Keterangan");

        txtKeterangan.setBackground(new java.awt.Color(255, 255, 255));
        txtKeterangan.setForeground(new java.awt.Color(0, 0, 0));

        btnSimpan.setBackground(new java.awt.Color(255, 255, 255));
        btnSimpan.setForeground(new java.awt.Color(0, 0, 0));
        btnSimpan.setText("SIMPAN");
        btnSimpan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSimpanActionPerformed(evt);
            }
        });

        btnHapus.setBackground(new java.awt.Color(255, 255, 255));
        btnHapus.setForeground(new java.awt.Color(0, 0, 0));
        btnHapus.setText("HAPUS");
        btnHapus.setEnabled(false);
        btnHapus.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnHapusActionPerformed(evt);
            }
        });

        btnEdit.setBackground(new java.awt.Color(255, 255, 255));
        btnEdit.setForeground(new java.awt.Color(0, 0, 0));
        btnEdit.setText("EDIT");
        btnEdit.setEnabled(false);
        btnEdit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditActionPerformed(evt);
            }
        });

        txtCari.setBackground(new java.awt.Color(255, 255, 255));
        txtCari.setForeground(new java.awt.Color(0, 0, 0));
        txtCari.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtCariKeyReleased(evt);
            }
        });

        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("CARI");

        jButton1.setBackground(new java.awt.Color(255, 255, 255));
        jButton1.setForeground(new java.awt.Color(0, 0, 0));
        jButton1.setText("BACK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        table.setBackground(new java.awt.Color(255, 255, 255));
        table.setForeground(new java.awt.Color(0, 0, 0));
        table.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "NRK", "Nama", "Group", "ID Peralatan", "Nama Peralatan", "Kondisi", "Keterangan"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        table.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                tableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(table);

        comboGroup.setBackground(new java.awt.Color(255, 255, 255));
        comboGroup.setForeground(new java.awt.Color(0, 0, 0));
        comboGroup.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "A", "B", "C" }));

        jLabel7.setForeground(new java.awt.Color(255, 255, 255));
        jLabel7.setText("ID Peralatan");

        txtIdPeralatan.setBackground(new java.awt.Color(255, 255, 255));
        txtIdPeralatan.setForeground(new java.awt.Color(0, 0, 0));
        txtIdPeralatan.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtIdPeralatanActionPerformed(evt);
            }
        });

        jLabel8.setForeground(new java.awt.Color(255, 255, 255));
        jLabel8.setText("Nama Peralatan");

        txtNamaPeralatan.setBackground(new java.awt.Color(255, 255, 255));
        txtNamaPeralatan.setForeground(new java.awt.Color(0, 0, 0));

        jLabel9.setForeground(new java.awt.Color(255, 255, 255));
        jLabel9.setText("Kondisi");

        kondisi.add(kondisiBaik);
        kondisiBaik.setSelected(true);
        kondisiBaik.setText("Baik");

        kondisi.add(kondisiRusak);
        kondisiRusak.setText("Rusak");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jButton1)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnSimpan, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(btnEdit, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnHapus, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 68, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel7, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel8, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(jLabel9, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                                .addGap(18, 18, 18)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                    .addComponent(txtNama, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtNrk, javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(txtKeterangan, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                                    .addComponent(comboGroup, javax.swing.GroupLayout.Alignment.LEADING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(txtIdPeralatan, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                                    .addComponent(txtNamaPeralatan, javax.swing.GroupLayout.DEFAULT_SIZE, 309, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(kondisiBaik)
                                        .addGap(18, 18, 18)
                                        .addComponent(kondisiRusak)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, 197, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap())
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtCari, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel1)
                            .addComponent(txtNrk, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(txtNama, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(comboGroup, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(txtIdPeralatan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel8)
                            .addComponent(txtNamaPeralatan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(kondisiBaik)
                            .addComponent(kondisiRusak))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(txtKeterangan, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(btnSimpan)
                            .addComponent(btnEdit)
                            .addComponent(btnHapus))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jButton1))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 474, Short.MAX_VALUE))
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnSimpanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSimpanActionPerformed
        // isi variable dari inputan
        String nrk = txtNrk.getText();
        String nama = txtNama.getText();
        String group = (String) comboGroup.getSelectedItem();
        String idperalatan = txtIdPeralatan.getText();
        String namaperalatan = txtNamaPeralatan.getText();
        String kondisi = (kondisiBaik.isSelected()) ? "Baik" : "Rusak";
        String keterangan = txtKeterangan.getText();
        
        try {
            // mengambil koneksi dari database
            Connection c = Koneksi.getKoneksi();
            
            // Menentukan table dari pilihan group
            String table = "";
            switch (group) {
                case "A":
                    table = "groupa";
                    break;
                case "B":
                    table = "groupb";
                    break;
                case "C":
                    table = "groupc";
                    break;
                default:
                    break;
            }
            
            // membuat statement yang di amankan
            PreparedStatement ps = c.prepareStatement("INSERT INTO " + table + " VALUES (null, ?, ?, ?, ?, ?, ?, ?, 'LIGHT PRESSURE', now())");
            
            // mengisi nilai statement sesuai urutan
            ps.setString(1, nrk);
            ps.setString(2, nama);
            ps.setString(3, group);
            ps.setString(4, idperalatan);
            ps.setString(5, namaperalatan);
            ps.setString(6, kondisi);
            ps.setString(7, keterangan);
            
            // mengeksekusi query, lalu mengambil nilai, berapa baris yang berhasil ditambahkan
            if (ps.executeUpdate() > 0) {
                // menampilkan dialog berhasil
                JOptionPane.showMessageDialog(this, "Berhasil tambah");
                
                // mengosongkan text field, jika sudah berhasil menambah data
                txtNrk.setText("");
                txtNama.setText("");
                txtIdPeralatan.setText("");
                txtNamaPeralatan.setText("");
                txtKeterangan.setText("");
                comboGroup.setSelectedIndex(0);
            } else {
                JOptionPane.showMessageDialog(this, "Gagal input");
            }
            
            // mereload table output, untuk mengambil data terbaru
            loadTable();
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(this, ex.getMessage());
        }
    }//GEN-LAST:event_btnSimpanActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // menyembunyikan form yang sekarang
        setVisible(false);
        
        // memunculkan form master
        new FormUnit().setVisible(true);
    }//GEN-LAST:event_jButton1ActionPerformed

    private void btnHapusActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnHapusActionPerformed
        // mengecek apakah ada baris yang dipilih
        if (row > -1) {
            try {
                // mengambil koneksi
                Connection c = Koneksi.getKoneksi();
                
                // Menentukan table dari baris
                String group = (String) model.getValueAt(row, 3);
                String table = "";
                switch (group) {
                    case "A":
                        table = "groupa";
                        break;
                    case "B":
                        table = "groupb";
                        break;
                    case "C":
                        table = "groupc";
                        break;
                    default:
                        break;
                }
                // membuat statement yang diamankan
                PreparedStatement ps = c.prepareStatement("DELETE FROM " + table + " WHERE id = ?");
            
                // mengisi nilai statement sesuai urutan, lalu mengisi nya dengan nilai dari baris yang dipilih,
                // diisi dengan id yang ada dikolom 0
                ps.setString(1, (String) model.getValueAt(row, 0));
                
                // mengeksekusi query, lalu mengecek apakah berhasil hapus
                if (ps.executeUpdate() > 0) {
                    JOptionPane.showMessageDialog(this, "Berhasil hapus");
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal hapus");
                }
		loadTable();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnHapusActionPerformed

    private void tableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_tableMouseClicked
        // ambil baris yang dipilih di table
        row = table.rowAtPoint(evt.getPoint());
        
        // cek apakah ada baris yang terpilih
        if (row > -1) {
            // mengisi field dengan baris yang dipilih
            txtNrk.setText((String) model.getValueAt(row, 1));
            txtNama.setText((String) model.getValueAt(row, 2));
            // Upper case huruf dari grup
            comboGroup.setSelectedItem(((String) model.getValueAt(row, 3)).toUpperCase());
            txtIdPeralatan.setText((String) model.getValueAt(row, 4));
            txtNamaPeralatan.setText((String) model.getValueAt(row, 5));
            
            // Mengecek Kondisi, jika baik select radio baik, jika tidak maka sebaliknya
            if (model.getValueAt(row, 6).equals("Baik"))
            {
                kondisiBaik.setSelected(true);
            } else {
                kondisiRusak.setSelected(true);
            }
            
            txtKeterangan.setText((String) model.getValueAt(row, 7));
            
            // ketika ada baris yang terpilih, matikan tombol simpan
            btnSimpan.setEnabled(false);
            
            // ketika ada baris yang terpilih, nyalakan tombol hapus, dan edit
            btnHapus.setEnabled(true);
            btnEdit.setEnabled(true);
        } else {
            // ketika ada baris yang terpilih, nyalakan tombol simpan
            btnSimpan.setEnabled(true);
            
            // ketika ada baris yang terpilih, matikan tombol hapus, dan edit
            btnHapus.setEnabled(false);
            btnEdit.setEnabled(false);
        }
    }//GEN-LAST:event_tableMouseClicked

    private void btnEditActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditActionPerformed
        // mengisi variable dari field
        String nrk = txtNrk.getText();
        String nama = txtNama.getText();
        String group = (String) comboGroup.getSelectedItem();
        String idperalatan = txtIdPeralatan.getText();
        String namaperalatan = txtNamaPeralatan.getText();
        String kondisi = (kondisiBaik.isSelected()) ? "Baik" : "Rusak";
        String keterangan = txtKeterangan.getText();
        
        if (row > -1) {
            try {
                Connection c = Koneksi.getKoneksi();
                
                // Menentukan table dari baris
                String table = "";
                switch ((String) model.getValueAt(row, 3)) {
                    case "A":
                        table = "groupa";
                        break;
                    case "B":
                        table = "groupb";
                        break;
                    case "C":
                        table = "groupc";
                        break;
                    default:
                        break;
                }
                PreparedStatement ps = c.prepareStatement("UPDATE " + table + " SET nrk = ?, nama = ?, `group` = ?, idperalatan = ?, namaperalatan = ?, kondisi = ?, keterangan = ? WHERE id = ?");

                // mengisi statement sesuai urutan
                ps.setString(1, nrk);
                ps.setString(2, nama);
                ps.setString(3, group);
                ps.setString(4, idperalatan);
                ps.setString(5, namaperalatan);
                ps.setString(6, kondisi);
                ps.setString(7, keterangan);
                
                // mengisi nilai where idperalatan dengan mengambil id dari baris table
                ps.setString(8, (String) model.getValueAt(row, 0));

                if (ps.executeUpdate() > 0) {
                    JOptionPane.showMessageDialog(this, "Berhasil edit");

                    // mengosongkan text field, jika sudah berhasil menambah data
                    txtNrk.setText("");
                    txtNama.setText("");
                    txtIdPeralatan.setText("");
                    txtNamaPeralatan.setText("");
                    txtKeterangan.setText("");
                    comboGroup.setSelectedIndex(0);
                } else {
                    JOptionPane.showMessageDialog(this, "Gagal input");
                }

                loadTable();
            } catch (SQLException ex) {
                JOptionPane.showMessageDialog(this, ex.getMessage());
            }
        }
    }//GEN-LAST:event_btnEditActionPerformed

    private void txtCariKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtCariKeyReleased
        // ambil cari dari field, lalu tambahkan wildcard
        String cari = "%" + txtCari.getText() + "%";
        
        try {
            Connection c = Koneksi.getKoneksi();
            
            PreparedStatement ps = c.prepareStatement("SELECT * FROM (SELECT * FROM groupa UNION ALL SELECT * FROM groupb UNION ALL SELECT * FROM groupc) AS a WHERE jenis = 'LIGHT PRESSURE' AND (idperalatan LIKE ? OR namaperalatan LIKE ?)");
            
            ps.setString(1, cari);
            ps.setString(2, cari);
            
            ResultSet rs = ps.executeQuery();
            
            // menghapus semua data di table output
            model.getDataVector().clear();
            
            while (rs.next()) {
                model.addRow(new Object[] {
                    rs.getString(1),
                    rs.getString(2),
                    rs.getString(3),
                    rs.getString(4),
                    rs.getString(5),
                    rs.getString(6),
                    rs.getString(7),
                    rs.getString(8)
                });
            }
            
            model.fireTableDataChanged();
        } catch (SQLException ex) {
            Logger.getLogger(FormLightPressure.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtCariKeyReleased

    private void txtIdPeralatanActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtIdPeralatanActionPerformed
        String idperalatan = txtIdPeralatan.getText();
        
        try {
            Connection c = Koneksi.getKoneksi();
            
            PreparedStatement ps = c.prepareStatement("SELECT * FROM peralatan WHERE idperalatan = ?");
            
            ps.setString(1, idperalatan);
            
            ResultSet rs = ps.executeQuery();
            
            if (rs.next()) {
                txtNamaPeralatan.setText(rs.getString("namaperalatan"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FormPengadaanBarang.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtIdPeralatanActionPerformed

    private void txtNrkActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtNrkActionPerformed
        String nrk = txtNrk.getText();
        
        try {
            Connection c = Koneksi.getKoneksi();
            
            PreparedStatement ps = c.prepareStatement("SELECT * FROM pegawai WHERE nrk = ?");
            
            ps.setString(1, nrk);
            
            ResultSet rs = ps.executeQuery();
            
            
            if (rs.next()) {
                txtNama.setText(rs.getString("nama"));
                comboGroup.setSelectedItem(rs.getString("group"));
            }
        } catch (SQLException ex) {
            Logger.getLogger(FormPengadaanBarang.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_txtNrkActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(FormLightPressure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(FormLightPressure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(FormLightPressure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(FormLightPressure.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new FormLightPressure().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnEdit;
    private javax.swing.JButton btnHapus;
    private javax.swing.JButton btnSimpan;
    private javax.swing.JComboBox<String> comboGroup;
    private javax.swing.JButton jButton1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.ButtonGroup kondisi;
    private javax.swing.JRadioButton kondisiBaik;
    private javax.swing.JRadioButton kondisiRusak;
    private javax.swing.JTable table;
    private javax.swing.JTextField txtCari;
    private javax.swing.JTextField txtIdPeralatan;
    private javax.swing.JTextField txtKeterangan;
    private javax.swing.JTextField txtNama;
    private javax.swing.JTextField txtNamaPeralatan;
    private javax.swing.JTextField txtNrk;
    // End of variables declaration//GEN-END:variables
}
